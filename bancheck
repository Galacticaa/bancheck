#!/bin/bash

Timeout=5
MaxDelay=5
MaxRetries=3
ProxyFile=proxies.txt

PogoAgent="Niantic App"
PtcAgent="pokemongo/1 CFNetwork/758.5.3 Darwin/15.6.0"
PogoUrl="https://pgorelease.nianticlabs.com/plfe/version"
PtcUrl="https://sso.pokemon.com/sso/login?service=https%3A%2F%2Fsso.pokemon.com%2Fsso%2Foauth2.0%2FcallbackAuthorize"

echo "╔══════════════════════════════════════╦═══════════════╗"
echo "║  Ban Checker for PTC and Pokemon GO  ║ Version 1.0.0 ║"
echo "║══════════════════════════════════════╩═══════════════║"
echo "║        https://github.com/Galacticaa/bancheck        ║"
echo "╚══════════════════════════════════════════════════════╝"
echo

if [ ! -f "$ProxyFile" ]; then
    echo "Could not find ${ProxyFile}!"

    read -p "Continue checking with external IP? [y/N] " response
    case "$response" in
        [yY]|[yY][eE][sS])
            SKIP_PROXY=true
            ProxyFile='noproxy'
            longest=10
            total=1
            ;;
        *)
            echo "Aborting."
            exit
            ;;
    esac
else
    for file in proxies_bad.txt proxies_banned.txt proxies_good.txt; do
        if [ -f $file ]; then
            read -rp "Remove ${file} before starting? [y/N] " response
            case "$response" in
                [yY]|[yY][eE][sS])
                    rm $file && echo "Successfully removed ${file}"
                    ;;
            esac
        fi
    done

    SKIP_PROXY=false
    total=$(wc -l < "$ProxyFile")
    longest=$(wc -L < "$ProxyFile")
    ProxyFile=$(cat "$ProxyFile")
fi

echo
echo "Beginning check for ~${total} proxies..."

declare -i pogo_fail=0
declare -i pogo_bans=0
declare -i ptc_fail=0
declare -i ptc_bans=0
declare -i total=0

printf "\n %-${longest}s   PoGo [ Status ]  PTC [ Status ]\n" 'Proxy'

for proxy in $ProxyFile; do
    BAD=false
    BAN=false

    proxy_params="-sw 'HTTP_STATUS:%{http_code}' -m ${Timeout} --retry ${MaxRetries}"
    if [ "$SKIP_PROXY" = false ]; then
        proxy_params+=" -x ${proxy}"
        proxy=$(echo "$proxy" | tr -d '\r')
    fi

    printf " %-${longest}s  " $proxy

    sleep $[($RANDOM % $MaxDelay) + 1]s

    # Begin PoGo check
    response=$(curl $proxy_params -A "$PogoAgent" $PogoUrl)
    exit_code=$?
    if [ $exit_code -eq 0 ]; then
        status=$(echo $response | tr -d '\n' | sed -e 's/.*HTTP_STATUS://')

        if [ $status -eq 403 ]; then BAN=true; pogo_bans+=1; echo -n ' BAN!'
        elif [ $status -eq 200 ]; then echo -n ' PASS'
        else BAD=true; pogo_fail+=1; echo -n ' FAIL'; fi

        echo -n " [HTTP:$status]"
    else BAD=true; pogo_fail+=1; printf " FAIL [CURL:%3s]" $exit_code; fi

    sleep $[($RANDOM % $MaxDelay) + 1]s

    # Begin PTC check
    response=$(curl $proxy_params -A "$PtcAgent" $PtcUrl)
    exit_code=$?
    if [ $exit_code -eq 0 ]; then
        status=$(echo $response | tr -d '\n' | sed -e 's/.*HTTP_STATUS://')

        if [ $status -eq 409 ]; then BAN=true; ptc_bans+=1; echo -n ' BAN!'
        elif [ $status -eq 200 ]; then echo -n ' PASS'
        else BAD=true; ptc_fail+=1; echo -n ' FAIL'; fi

        echo " [HTTP:${status}]"
    else BAD=true; ptc_fail+=1; printf " FAIL [CURL:%3s]\n" $exit_code; fi

    # Output to good/bad files
    if [ "$SKIP_PROXY" = false ]; then
        if $BAD; then
            echo "$proxy" >> proxies_bad.txt
        elif $BAN; then
            echo "$proxy" >> proxies_banned.txt
        else
            echo "$proxy" >> proxies_good.txt
        fi
    fi

    total+=1
done

echo
echo "Proxy check complete!"

if [ "$SKIP_PROXY" = true ]; then exit; fi

pogo_good=$((total - pogo_bans - pogo_fail))
ptc_good=$((total - ptc_bans - ptc_fail))

echo "PokemonGO has $pogo_bans/$total bans, $pogo_good good accounts and $pogo_fail other failures."
echo "PTC has $ptc_bans/$total bans, $ptc_good good accounts and $ptc_fail other failures."
